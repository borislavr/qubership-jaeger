version: "2.0"
name: sandbox
authConfig:
  aws:
    authType: shortLived
    provider: aws
    authMethod: assume-role
    credentialId: role-aws
  helm:
    authType: longLived
    credentialId: cred-nexus
mavenConfig:
  authConfig: aws
  repositoryDomainName: https://codeartifact.eu-west-1.amazonaws.com/maven/app
  targetSnapshot: snapshots
  targetStaging: staging
  targetRelease: releases
  snapshotGroup: org.qubership.app
  releaseGroup: org.qubership.app
dockerConfig:
  authConfig: aws
  repositoryDomainName: https://123456789.dkr.ecr.eu-west-1.amazonaws.com
  snapshotUri: docker/snapshots
  stagingUri: docker/staging
  releaseUri: docker/releases
  groupUri: docker
  snapshotRepoName: docker-snapshots
  stagingRepoName: docker-staging
  releaseRepoName: docker-releases
  groupName: docker
helmConfig:
  authConfig: helm
  repositoryDomainName: https://nexus.mycompany.internal/repository/helm-charts
  helmTargetStaging: helm-staging
  helmTargetRelease: helm-releases
helmAppConfig:
  authConfig: helm
  repositoryDomainName: https://nexus.mycompany.internal/repository/helm-charts
  helmStagingRepoName: helm-staging
  helmReleaseRepoName: helm-releases
  helmGroupRepoName: helm-group
  helmDevRepoName: helm-dev
goConfig:
  goTargetSnapshot: go-snapshots
  goTargetRelease: go-releases
  goProxyRepository: https://goproxy.internal/go/
rawConfig:
  rawTargetSnapshot: raw/snapshots
  rawTargetRelease: raw/releases
  rawTargetStaging: raw/staging
  rawTargetProxy: https://proxy.raw.local/
npmConfig:
  npmTargetSnapshot: npm-snapshots
  npmTargetRelease: npm-releases
